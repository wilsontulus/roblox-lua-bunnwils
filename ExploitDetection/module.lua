--[[

	Exploiter Reporting Module via External Service
	License: MIT License (https://spdx.org/licenses/MIT)
	This Luau code was made by the following person:
	- wilsontulus5

--]]

local players = game:GetService("Players")
local reprep = game:GetService("ReplicatedStorage"):WaitForChild("GameScripts")
local youmis = {"bunny", "cat", "rabbid"}
local httpSrv = game:GetService("HttpService")
local expwh = ""
local cool = {}

local GameName = "Generic Game Name"
local whitelisted = {
	
	643971986; -- wilsontulus5

}

-- Fetch a fun kick message for players encountering an exploiter

local function getFunExpd(nam:string)
	local funEXPDMessages = {
		youmis[math.random(1,#youmis)].." has kicked out "..nam.." for cheating!";
		"Looks like "..nam.." aren't a match for us because they are such a cheater.";
		"Guys! Get away from "..nam..", he/she got caught exploiting in a lego game!";
		"[BREAKING NEWS] "..nam.." have been found as an exploiter in a lego game. Authorities are looking after him/her.";
		nam.." has been caught in 4K for opening an executor while playing this game.";
		"Thanos snapped out "..nam.." with his fingers for exploiting.";
		"Halo guys! Jadi aku baru saja nemu org ini namanya "..nam..", dia tuh exploiting jd aku kick ya haha!";

		"Jiwa orang ini "..nam.." setipis tisu betul, sampe berani nya ngecit...";
	}
	return funEXPDMessages[math.random(1, #funEXPDMessages)]
end

-- Gets a server type

local function getServerType()
	if game.PrivateServerId ~= "" then
		if game.PrivateServerOwnerId ~= 0 then
			return "PrivateServer"
		else
			return "ReservedServer"
		end
	else
		return "StandardServer"
	end
end

-- Converts supported 3 kinds of numbers to strings for choice-based functions

local function intToStrA(vl)
	local vln = tonumber(vl)
	if vln then
		if vln == -1 then
			return "Unknown"
		elseif vln == 0 then
			return "No"
		elseif vln == 1 then
			return "Yes"
		else
			return "Unknown"
		end
	else
		return "Nil"
	end
end

-- Send detection reports to analytics server

local function internalNotify(player : Player, reason: string, detailedres: string)
	local DN = player.DisplayName
	local N = player.Name
	local U = player.UserId
	local P = player
	local PGG = player:FindFirstChild("PlayerValue")
	local UISReferenceData = {
		Accelerometer = -1; 
		Gamepad = -1;
		Keyboard = -1;
		Mouse = -1;
		Touch = -1;
		LastinputUIS = "Unknown";
		Resolution = "Unknown";
		Platform = "Unknown";
		Hyperion = "Unknown";
		ProcessorClockSpeed = 1600;
	}
	if PGG and PGG:FindFirstChild("UISEnabled") then
		print("[EXPDETEC] Device info is exist, sending too")
		local upg = PGG:FindFirstChild("UISEnabled")
		local upgs = pcall(function()
			for aa,av in pairs(upg:GetChildren()) do
				if UISReferenceData[av.Name] then
					UISReferenceData[av.Name] = av.Value
				end
			end
		end)
	else
		print("[EXPDETEC] Device info is not exist")
	end
	
	local sloc = game:GetService("ReplicatedStorage"):FindFirstChild("ServerLocation",true) or {Value = "Unknown"}
	local DTR = detailedres or "none"
	local data5 = 
		{
			["content"] = "",
			["username"] = "Anti-Exploit Notification",
			["avatar_url"] = "",
			["embeds"] = {{
				["title"]= "Player kicked for exploiting in "..GameName,
				["description"] = "Reason: "..tostring(reason).." - Detailed Reason: "..DTR,
				["type"]= "rich",
				["color"]= tonumber("0x"..Color3.fromRGB(255, 52, 52):ToHex()),
				["fields"]={
					{
						["name"]="Player Info",	
						["value"]= DN.." | "..N.." | "..U,
						["inline"]=false
					},
					{
						["name"]="Server Info (JobID, ServerType, ServerRegion)",	
						["value"]= tostring(game.JobId).." | "..tostring(getServerType()).." | "..tostring(sloc.Value),
						["inline"]=false
					},
					{
						["name"]="Device Info",	
						["value"]= "Accelerometer: "..tostring(intToStrA(UISReferenceData.Accelerometer)).." | Keyboard: "..tostring(intToStrA(UISReferenceData.Keyboard)).." | Mouse: "..tostring(intToStrA(UISReferenceData.Mouse)).." | Touch: "..tostring(intToStrA(UISReferenceData.Touch)).." | Gamepad: "..tostring(intToStrA(UISReferenceData.Gamepad)).." | Lastinput: "..tostring(UISReferenceData.LastinputUIS).." | Hyperion: "..tostring(UISReferenceData.Hyperion).." | Platform: "..tostring(UISReferenceData.Platform).." | Resolution: "..tostring(UISReferenceData.Resolution).." | ProcessorClockSpeed: "..tostring(UISReferenceData.ProcessorClockSpeed),
						["inline"]=false
					}
				}
			}}
		}
	local encoded = httpSrv:JSONEncode(data5)
	local success, errorMessage = pcall(function()
		httpSrv:PostAsync(expwh, encoded)
	end)
	if success then return true
	else 
		warn("Exploit Detection Logs whook error! Error message: "..errorMessage) 
		return false 	
	end
end

-- Checks admin level for Adonis Admin system

local function GadonisCheck(player:Player)
	local Gadonis = _G.Adonis
	local MinimumAdminLevel = 200
	if Gadonis then
		local a, Glevel = pcall(function()
			return Gadonis.GetLevel(player)
		end)
		if a and tonumber(Glevel) and Glevel >= MinimumAdminLevel then
			return true
		else
			return false
		end
	end
	return false
end

-- Callable functions

local oh = {}

-- Kick player with crash-effect and exploit report

function oh.KickPlr(pl: Player, tap: string, deta: string)
	if not pl then
		warn("[System-AC] Player not found!")
		return false
	end
	local tp = tap or "Unknown reason"
	local uid = pl.UserId
	if table.find(cool, pl.UserId) then return end
	cool[uid] = true
	if (table.find(whitelisted, pl.UserId) or GadonisCheck(pl)) and not script.Test.Value then

		warn("[System-AC] Player "..pl.Name.." ("..pl.UserId..") is detected for "..tp..", but whitelisted")
		task.wait(5)
		cool[uid] = nil
		return false 
	else
		print("[System-AC] Player "..pl.Name.." ("..pl.UserId..") is detected for "..tp.."!")
		local tpc = tp or "Unknown reason"
		local expk = game:GetService("ServerStorage").ExpKick:Clone()
		expk:WaitForChild("Violator"):WaitForChild("Title"):WaitForChild("Reason").Text = "You've been kicked from the server due to suspicious activity ["..tpc.."]"
		expk.Parent = pl:WaitForChild("PlayerGui")
		if not string.find(tpc, "Unknown") and not string.find(tpc, "esponding") then
			local funexpd = tostring(getFunExpd(pl.Name))
			local curmsg = funexpd.." ["..tpc.."]"
			reprep:WaitForChild("DonationAnno"):FireAllClients(curmsg,Color3.fromRGB(240,60,60))
			print("[System-AC] "..curmsg)
		end
		task.spawn(function() internalNotify(pl, tp, deta) end)
		task.wait(6)
		if pl then
			pl:Kick("System-AC Suspicious: "..tpc)
		end
		task.wait(5)
		cool[uid] = nil
	end 

end

-- Only do exploit reports, no kicking. Usually for 3rd-party anti-exploits

function oh.PostPlrWHOnly(pl: Player, tap: string, deta: string)
	if not pl then
		warn("[System-AC] Player not found!")
		return false
	end
	local tp = tap or "Unknown reason"
	local uid = pl.UserId
	if table.find(cool, pl.UserId) then return end
	cool[uid] = true

	local funexpd = tostring(getFunExpd(pl.Name))
	local curmsg = "Unknown reason"
	if (table.find(whitelisted, pl.UserId) or GadonisCheck(pl)) then

		warn("[System-AC] Player "..pl.Name.." ("..pl.UserId..") is detected for "..tp..", but whitelisted")
		task.wait(5)
		cool[uid] = nil
		return false 
	else
		if string.find(tp, "Exploit detected") then
			task.spawn(function() internalNotify(pl, "Internal Luau detection occured", tp) end)
			curmsg = funexpd.." [Internal Luau detection occured]"
		elseif string.find(tp, "isallowed content") or string.find(tp, "CoreGui Textbox") then	
			task.spawn(function() internalNotify(pl, "CoreGui Tamper Detection occured", tp) end)
			curmsg = funexpd.." [CoreGui Tamper Detection occured]"
		else
			task.spawn(function() internalNotify(pl, tp, deta) end)
			curmsg = funexpd.." ["..tp.."]"
		end
		if not string.find(tp, "Unknown") and not string.find(tp, "esponding") then
			reprep:WaitForChild("DonationAnno"):FireAllClients(curmsg,Color3.fromRGB(240,60,60))
			print("[System-AC] "..curmsg)
		end
		task.wait(5)
		cool[uid] = nil
	end 
end

return oh
